name: Docker build

on:
  workflow_call:
    inputs:
      IMAGE_NAME:
        description: Name of the image to build (eg. 'ghcr.io/my-org/my-image')
        required: true
        type: string
      IMAGE_TAG:
        description: Tag used to build image
        required: true
        type: string
      LATEST_TAG:
        description: Whether to tag the image with 'latest'
        required: false
        default: false
        type: boolean
      IMAGE_DOCKERFILE:
        description: Path of the dockerfile to build image
        required: true
        type: string
      IMAGE_CONTEXT:
        description: Path of the context to build image
        required: true
        type: string
      BUILD_AMD64:
        description: Build for amd64
        required: false
        default: true
        type: boolean
      BUILD_ARM64:
        description: Build for arm64
        required: false
        default: true
        type: boolean
      USE_QEMU:
        description: Use QEMU emulator for arm64
        required: false
        default: false
        type: boolean
      REGISTRY_USERNAME:
        description: Username used to login into registry
        required: false
        type: string
      REGISTRY_PASSWORD:
        description: Password used to login into registry
        required: false
        type: string

permissions:
  packages: write
  contents: read

jobs:
  infos:
    name: Get build infos
    runs-on: ubuntu-24.04
    outputs:
      registry: ${{ steps.infos.outputs.REGISTRY }}
      lower-image: ${{ steps.infos.outputs.LOWER_IMAGE }}
      major-tag: ${{ steps.infos.outputs.MAJOR_TAG }}
      minor-tag: ${{ steps.infos.outputs.MINOR_TAG }}
      patch-tag: ${{ steps.infos.outputs.PATCH_TAG }}
      short-sha: ${{ steps.infos.outputs.SHORT_SHA }}
      lower-branch: ${{ steps.infos.outputs.LOWER_BRANCH }}
    steps:
    - name: Checks-out repository
      uses: actions/checkout@v4

    - name: Get infos
      id: infos
      run: |
        echo "REGISTRY=$(echo '${{ inputs.IMAGE_NAME }}' | cut -d "/" -f 1)" >> $GITHUB_OUTPUT
        echo "LOWER_IMAGE=$(echo '${{ inputs.IMAGE_NAME }}' | cut -d "/" -f 2- | sed 's/\//-/g' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
        echo "MAJOR_TAG=$(echo '${{ inputs.IMAGE_TAG }}' | cut -d "." -f 1)" >> $GITHUB_OUTPUT
        echo "MINOR_TAG=$(echo '${{ inputs.IMAGE_TAG }}' | cut -d "." -f 2)" >> $GITHUB_OUTPUT
        echo "PATCH_TAG=$(echo '${{ inputs.IMAGE_TAG }}' | cut -d "." -f 3)" >> $GITHUB_OUTPUT
        echo "SHORT_SHA=sha-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "LOWER_BRANCH=$(echo '${{ github.head_ref || github.ref_name }}' | sed 's/\//-/g' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

  build:
    name: Build application
    runs-on: ${{ matrix.runners }}
    needs:
    - infos
    strategy:
      matrix:
        runners: ${{ (inputs.BUILD_AMD64 && inputs.BUILD_ARM64 && !inputs.USE_QEMU && fromJson('["ubuntu-24.04", "ubuntu-24.04-arm"]')) || (inputs.BUILD_ARM64 && !inputs.USE_QEMU && fromJson('["ubuntu-24.04-arm"]')) || fromJson('["ubuntu-24.04"]') }}
        image: ${{ inputs.IMAGE_NAME }}
    steps:
    - name: Checks-out repository
      uses: actions/checkout@v4

    - name: Set up Docker buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ format('buildx-{0}-{1}-{2}-{3}', runner.os, runner.arch, needs.infos.outputs.lower-image, needs.infos.outputs.short-sha) }}
        restore-keys: |
          ${{ format('buildx-{0}-{1}-{2}-', runner.os, runner.arch, needs.infos.outputs.lower-image) }}

    - name: Set up QEMU (for multi platform build)
      uses: docker/setup-qemu-action@v3
      if: ${{ inputs.USE_QEMU }}

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ needs.infos.outputs.registry }}
        username: ${{ startsWith(inputs.IMAGE_NAME, 'ghrc.io') && github.actor || inputs.REGISTRY_USERNAME }}
        password: ${{ startsWith(inputs.IMAGE_NAME, 'ghrc.io') && github.token || inputs.REGISTRY_PASSWORD }}
        logout: true

    - name: Build and push docker image
      id: build
      uses: docker/build-push-action@v6
      with:
        context: ${{ inputs.IMAGE_CONTEXT }}
        file: ${{ inputs.IMAGE_DOCKERFILE }}
        provenance: false
        platforms: ${{ (inputs.BUILD_AMD64 && inputs.BUILD_ARM64 && inputs.USE_QEMU && 'linux/amd64,linux/arm64') || (inputs.BUILD_ARM64 && 'linux/arm64') || (inputs.BUILD_AMD64 && 'linux/amd64') }}
        outputs: type=image,name=${{ inputs.IMAGE_NAME }},push-by-digest=true,name-canonical=true,push=true
        build-args: |
          APP_VERSION=${{ inputs.IMAGE_TAG || needs.infos.outputs.short-sha }}
        # cache-from: type=gha
        # cache-to: type=gha,mode=max
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new

    # Necessary to avoid forever growing cache
    # https://github.com/docker/build-push-action/issues/252
    # https://github.com/moby/buildkit/issues/1896
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    - name: Export digest
      run: |
        mkdir -p /tmp/digests/${{ needs.infos.outputs.lower-image }}
        digest="${{ steps.build.outputs.digest }}"
        touch "/tmp/digests/${{ needs.infos.outputs.lower-image }}/${digest#sha256:}"

    - name: Upload digest
      uses: actions/upload-artifact@v4
      with:
        name: digests-${{ needs.infos.outputs.lower-image }}-${{ (inputs.BUILD_AMD64 && inputs.BUILD_ARM64 && inputs.USE_QEMU && 'multiarch') || (inputs.BUILD_ARM64 && 'arm64') || (inputs.BUILD_AMD64 && 'amd64') }}
        path: /tmp/digests/${{ needs.infos.outputs.lower-image }}/*
        if-no-files-found: error
        retention-days: 1

  merge:
    name: Merge digest
    runs-on: ubuntu-24.04
    needs:
      - infos
      - build
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        pattern: digests-${{ needs.infos.outputs.lower-image }}-*
        path: /tmp/digests/${{ needs.infos.outputs.lower-image }}
        merge-multiple: true

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ inputs.IMAGE_NAME }}
        tags: |
          type=raw,value=${{ needs.infos.outputs.lower-branch }},enable=${{ github.head_ref != 'main' }}
          type=raw,value=${{ inputs.IMAGE_TAG }},enable=${{ inputs.IMAGE_TAG != '' }}
          type=raw,value=${{ needs.infos.outputs.major-tag }}.${{ needs.infos.outputs.minor-tag }},enable=${{ needs.infos.outputs.major-tag != '' && needs.infos.outputs.minor-tag != '' }}
          type=raw,value=${{ needs.infos.outputs.major-tag }},enable=${{ needs.infos.outputs.major-tag != '' }}
          type=raw,value=latest,enable=${{inputs.LATEST_TAG == true }}

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ needs.infos.outputs.registry }}
        username: ${{ needs.infos.outputs.registry == 'ghrc.io' && github.actor || inputs.REGISTRY_USERNAME }}
        password: ${{ needs.infos.outputs.registry == 'ghrc.io' && github.token || inputs.REGISTRY_PASSWORD }}
        logout: true

    - name: Create manifest list and push
      working-directory: /tmp/digests/${{ needs.infos.outputs.lower-image }}
      run: |
        docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
          $(printf '${{ inputs.IMAGE_NAME }}@sha256:%s ' *)

    - name: Inspect image
      run: |
        docker buildx imagetools inspect ${{ inputs.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
