name: Clean cache

on:
  workflow_call:
    inputs:
      PR_NUMBER:
        description: ID number of the pull request assiocited with the cache
        required: false
        type: number
      BRANCH_NAME:
        description: Branch name assiocited with the cache
        required: false
        type: string
      IMAGE:
        description: Name of the image to delete from ghcr.io (eg. 'my-org/my-image:my-tag')
        required: false
        type: string

permissions:
  packages: write
  contents: read
  actions: write

jobs:
  cleanup-cache:
    name: Delete github cache
    runs-on: ubuntu-latest
    if: ${{ inputs.PR_NUMBER || inputs.BRANCH_NAME }}
    steps:
    - name: Clean cache for closed branch
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        REPO=${{ github.repository }}
        if [ -n "${{ inputs.BRANCH_NAME }}" ]; then
          BRANCH="${{ inputs.BRANCH_NAME }}"
        elif [ -n "${{ inputs.PR_NUMBER }}" ]; then
          BRANCH="refs/pull/${{ inputs.PR_NUMBER }}/merge"
        fi

        echo "Fetching list of cache key"
        CACHE_KEYS=$(gh cache list -R $REPO -r $BRANCH -L 100 | cut -f 1)

        ## Setting this to not fail the workflow while deleting cache keys.
        set +e
        echo "Deleting caches..."
        for CACHE_KEY in $CACHE_KEYS; do
          gh cache delete $CACHE_KEY -R $REPO
        done
        echo "Done"

  cleanup-image:
    name: Delete image from ghcr.io
    runs-on: ubuntu-latest
    if: ${{ inputs.IMAGE }}
    steps:
    - name: Delete ${{ inputs.IMAGE }} image
      run: |
        REGISTRY_CHECK="${IMAGE%%/*}"
        if [[ "$REGISTRY_CHECK" == *.* || "$REGISTRY_CHECK" == *:* || "$REGISTRY_CHECK" == "localhost" ]]; then
          IMAGE_WITHOUT_REGISTRY="${IMAGE#*/}"
          PROCESSED_IMAGE="${IMAGE_WITHOUT_REGISTRY#*/}"
        else
          IMAGE_WITHOUT_REGISTRY="$IMAGE"
          PROCESSED_IMAGE="${IMAGE_WITHOUT_REGISTRY#*/}"
        fi

        OWNER="${IMAGE_WITHOUT_REGISTRY%%/*}"
        IMAGE_NAME="${PROCESSED_IMAGE%%:*}"
        IMAGE_TAG="${PROCESSED_IMAGE#*:}"
        IMAGE_NAME_URL_ENCODED="$(jq -rn --arg x "${IMAGE_NAME}" '$x | @uri')"

        OWNER_TYPE="$(curl -fsSL https://api.github.com/users/${OWNER} | jq -r '.type')"
        if [ "$OWNER_TYPE" = "Organization" ]; then
          MODE="orgs"
        else
          MODE="users"
        fi

        IMAGES=$(curl -fsSL \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/${MODE}/${OWNER}/packages/container/${IMAGE_NAME_URL_ENCODED}/versions?per_page=100")
        MAIN_IMAGE_ID=$(echo "$IMAGES" | jq -r --arg t "$IMAGE_TAG" '.[] | select(.metadata.container.tags[] | contains($t)) | .id')

        # Delete subsequent images
        while read -r SHA; do
          IMAGE_ID=$(echo "$IMAGES" | jq -r --arg s "$SHA" '.[] | select(.name == $s) | .id')

          printf "\n${red}[Delete ghcr image].${no_color} Deleting subsequent image '$OWNER/$IMAGE_NAME@$SHA'\n"

          curl -fsSL \
            -X DELETE \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/${MODE}/${OWNER}/packages/container/${IMAGE_NAME_URL_ENCODED}/versions/${IMAGE_ID}"
        done <<< "$(docker buildx imagetools inspect ghcr.io/${OWNER}/${IMAGE_NAME}:${IMAGE_TAG} --raw | jq -r '.manifests[] | .digest')"

        # Delete main image
        printf "\n${red}[Delete ghcr image].${no_color} Deleting image '$OWNER/$IMAGE_NAME:$IMAGE_TAG'\n"

        curl -fsSL \
          -X DELETE \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/${MODE}/${OWNER}/packages/container/${IMAGE_NAME_URL_ENCODED}/versions/${MAIN_IMAGE_ID}"
