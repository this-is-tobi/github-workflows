name: Lint JavaScript files

on:
  workflow_call:
    inputs:
      RUNTIME_VERSION:
        description: Runtime version to use (Node.js, Deno, or Bun version)
        type: string
        required: false
        default: "22"
      PACKAGE_MANAGER:
        description: Package manager to use (npm, pnpm, yarn, bun)
        type: string
        required: false
        default: "npm"
      RUNTIME:
        description: JavaScript runtime to use (node, bun)
        type: string
        required: false
        default: "node"
      ESLINT_CONFIG:
        description: ESLint config package to use (defaults to @antfu/eslint-config)
        type: string
        required: false
        default: "@antfu/eslint-config"
      WORKING_DIRECTORY:
        description: Working directory for the project
        type: string
        required: false
        default: "."
      LINT_PATHS:
        description: Paths to lint (space or comma-separated)
        type: string
        required: false
        default: "."
      ESLINT_CONFIG_FILE:
        description: Path to custom ESLint config file (if exists, will skip auto-config)
        type: string
        required: false
        default: ""
      FAIL_ON_ERROR:
        description: Whether to fail the workflow on linting errors
        type: boolean
        required: false
        default: true

permissions:
  contents: read

jobs:
  detect-setup:
    name: Detect project setup
    runs-on: ubuntu-latest
    outputs:
      package-manager: ${{ steps.detect.outputs.package-manager }}
      runtime: ${{ steps.detect.outputs.runtime }}
      has-eslint-config: ${{ steps.detect.outputs.has-eslint-config }}
      package-file: ${{ steps.detect.outputs.package-file }}
    steps:
    - name: Checks-out repository
      uses: actions/checkout@v5

    - name: Detect project configuration
      id: detect
      working-directory: ${{ inputs.WORKING_DIRECTORY }}
      run: |
        # Detect package manager
        if [ "${{ inputs.PACKAGE_MANAGER }}" != "npm" ]; then
          DETECTED_PM="${{ inputs.PACKAGE_MANAGER }}"
        elif [ -f "bun.lockb" ] || [ -f "bun.lock" ]; then
          DETECTED_PM="bun"
        elif [ -f "pnpm-lock.yaml" ]; then
          DETECTED_PM="pnpm"
        elif [ -f "yarn.lock" ]; then
          DETECTED_PM="yarn"
        else
          DETECTED_PM="npm"
        fi
        echo "Package manager detected: $DETECTED_PM"
        echo "package-manager=${DETECTED_PM}" >> $GITHUB_OUTPUT

        # Detect runtime
        if [ "${{ inputs.RUNTIME }}" != "node" ]; then
          DETECTED_RUNTIME="${{ inputs.RUNTIME }}"
        elif [ -f "bun.lockb" ] || [ -f "bun.lock" ]; then
          DETECTED_RUNTIME="bun"
        else
          DETECTED_RUNTIME="node"
        fi
        echo "Runtime detected: $DETECTED_RUNTIME"
        echo "runtime=${DETECTED_RUNTIME}" >> $GITHUB_OUTPUT

        # Check for existing ESLint config
        HAS_CONFIG="false"
        if [ -n "${{ inputs.ESLINT_CONFIG_FILE }}" ] && [ -f "${{ inputs.ESLINT_CONFIG_FILE }}" ]; then
          HAS_CONFIG="true"
        elif [ -f "eslint.config.js" ] || [ -f "eslint.config.mjs" ] || [ -f "eslint.config.cjs" ] || [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ] || [ -f ".eslintrc.yml" ] || [ -f ".eslintrc.yaml" ]; then
          HAS_CONFIG="true"
        fi
        echo "ESLint config exists: $HAS_CONFIG"
        echo "has-eslint-config=${HAS_CONFIG}" >> $GITHUB_OUTPUT

        # Detect package file
        if [ -f "package.json" ]; then
          echo "package-file=package.json" >> $GITHUB_OUTPUT
        else
          echo "package-file=" >> $GITHUB_OUTPUT
        fi

  lint:
    name: Lint files
    runs-on: ubuntu-latest
    needs: detect-setup
    steps:
    - name: Checks-out repository
      uses: actions/checkout@v5

    - name: Setup Node.js
      if: ${{ needs.detect-setup.outputs.runtime == 'node' || needs.detect-setup.outputs.package-manager != 'bun' }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.RUNTIME_VERSION }}

    - name: Setup Bun
      if: ${{ needs.detect-setup.outputs.runtime == 'bun' }}
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: ${{ inputs.RUNTIME_VERSION }}

    - name: Setup pnpm
      if: ${{ needs.detect-setup.outputs.package-manager == 'pnpm' }}
      uses: pnpm/action-setup@v4
      with:
        version: latest

    - name: Install dependencies (npm)
      if: ${{ needs.detect-setup.outputs.package-manager == 'npm' }}
      working-directory: ${{ inputs.WORKING_DIRECTORY }}
      run: npm ci

    - name: Install dependencies (pnpm)
      if: ${{ needs.detect-setup.outputs.package-manager == 'pnpm' }}
      working-directory: ${{ inputs.WORKING_DIRECTORY }}
      run: pnpm install --frozen-lockfile

    - name: Install dependencies (yarn)
      if: ${{ needs.detect-setup.outputs.package-manager == 'yarn' }}
      working-directory: ${{ inputs.WORKING_DIRECTORY }}
      run: yarn install --frozen-lockfile

    - name: Install dependencies (bun)
      if: ${{ needs.detect-setup.outputs.package-manager == 'bun' }}
      working-directory: ${{ inputs.WORKING_DIRECTORY }}
      run: bun install --frozen-lockfile

    - name: Setup ESLint config (if not exists)
      if: ${{ needs.detect-setup.outputs.has-eslint-config == 'false' }}
      working-directory: ${{ inputs.WORKING_DIRECTORY }}
      run: |
        # Check if ESLint is already in package.json
        echo "Checking for ESLint in package file: ${{ needs.detect-setup.outputs.package-file }}"
        if ! grep -q '"eslint"' ${{ needs.detect-setup.outputs.package-file }} 2>/dev/null; then
          # Install ESLint and config
          echo "Installing ESLint and config: ${{ inputs.ESLINT_CONFIG }}"
          case "${{ needs.detect-setup.outputs.package-manager }}" in
            npm)
              npm install --save-dev eslint ${{ inputs.ESLINT_CONFIG }}
              ;;
            pnpm)
              pnpm add -D eslint ${{ inputs.ESLINT_CONFIG }}
              ;;
            yarn)
              yarn add -D eslint ${{ inputs.ESLINT_CONFIG }}
              ;;
            bun)
              bun add -d eslint ${{ inputs.ESLINT_CONFIG }}
              ;;
          esac
        fi

        # Create ESLint config if it doesn't exist
        echo "Creating ESLint config file: eslint.config.js"
        cat > eslint.config.js << 'EOF'
        import antfu from '${{ inputs.ESLINT_CONFIG }}'

        export default antfu({
          vue: true,
          typescript: true,
          formatters: false,
          ignores: [
            '**/node_modules',
            '**/dist',
            '**/build',
            '**/.turbo',
            '**/coverage',
            '**/.nuxt',
            '**/.output',
            'pnpm-lock.yaml',
          ],
          stylistic: {
            overrides: {
              'antfu/if-newline': 'off',
              'jsonc/sort-keys': 'off',
              'no-console': 'off',
              'node/prefer-global/process': ['error', 'always'],
              'node/prefer-global/console': ['error', 'always'],
              'node/prefer-global/buffer': ['error', 'always'],
              'style/comma-dangle': ['error', 'always-multiline'],
              'style/quote-props': ['error', 'as-needed', { keywords: false, unnecessary: true }],
              'style/brace-style': ['error', '1tbs', { allowSingleLine: true }],
              'style/max-statements-per-line': ['error', { max: 2 }],
              'ts/ban-ts-comment': 'off',
              'unused-imports/no-unused-imports': 'error',
              'unused-imports/no-unused-vars': ['error', { vars: 'all', varsIgnorePattern: '^_', args: 'after-used', argsIgnorePattern: '^_', caughtErrors: 'all', caughtErrorsIgnorePattern: '^_', destructuredArrayIgnorePattern: '^_' }],
              'vue/no-v-html': 'off',
              'vue/no-irregular-whitespace': 'off',
              'vue/script-indent': 'off',
            },
          },
          yaml: {
            overrides: {
              'yaml/quotes': ['error', { prefer: 'double' }],
              'yaml/indent': ['error', 2, { indentBlockSequences: false }],
            },
          },
        })
        EOF

    - name: Run ESLint
      working-directory: ${{ inputs.WORKING_DIRECTORY }}
      run: |
        CONFIG_FLAG=""
        if [ -n "${{ inputs.ESLINT_CONFIG_FILE }}" ]; then
          CONFIG_FLAG="--config ${{ inputs.ESLINT_CONFIG_FILE }}"
        fi

        # Run ESLint and capture exit code
        EXIT_CODE=0
        case "${{ needs.detect-setup.outputs.package-manager }}" in
          npm)
            npx eslint $CONFIG_FLAG ${{ inputs.LINT_PATHS }} || EXIT_CODE=$?
            ;;
          pnpm)
            pnpm exec eslint $CONFIG_FLAG ${{ inputs.LINT_PATHS }} || EXIT_CODE=$?
            ;;
          yarn)
            yarn eslint $CONFIG_FLAG ${{ inputs.LINT_PATHS }} || EXIT_CODE=$?
            ;;
          bun)
            bunx eslint $CONFIG_FLAG ${{ inputs.LINT_PATHS }} || EXIT_CODE=$?
            ;;
        esac

        # Handle the exit code based on FAIL_ON_ERROR setting
        if [ $EXIT_CODE -ne 0 ]; then
          if [ "${{ inputs.FAIL_ON_ERROR }}" = "true" ]; then
            echo "❌ ESLint found errors and FAIL_ON_ERROR is true. Failing the workflow."
            exit $EXIT_CODE
          else
            echo "⚠️ ESLint found errors but FAIL_ON_ERROR is false. Workflow will continue."
            echo "Please review and fix the linting errors manually."
          fi
        else
          echo "✅ ESLint completed successfully with no errors."
        fi
